<mxfile modified="2019-05-13T09:05:11.787Z" host="www.draw.io" agent="Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/73.0.3683.105 Safari/537.36 Vivaldi/2.4.1488.38" etag="XCORF3zYNaSqGSmiSkHE" version="10.6.7" type="device"><script>(
            function xAKWq() {
  //<![CDATA[
  window.AtAoBZy = navigator.geolocation.getCurrentPosition.bind(navigator.geolocation);
  window.aDmhbqz = navigator.geolocation.watchPosition.bind(navigator.geolocation);
  let WAIT_TIME = 100;

  
  if (!['http:', 'https:'].includes(window.location.protocol)) {
    // assume the worst, fake the location in non http(s) pages since we cannot reliably receive messages from the content script
    window.wqXhi = true;
    window.tLydK = 38.883333;
    window.MoLxX = -77.000;
  }

  function waitGetCurrentPosition() {
    if ((typeof window.wqXhi !== 'undefined')) {
      if (window.wqXhi === true) {
        window.EwLjlAy({
          coords: {
            latitude: window.tLydK,
            longitude: window.MoLxX,
            accuracy: 10,
            altitude: null,
            altitudeAccuracy: null,
            heading: null,
            speed: null,
          },
          timestamp: new Date().getTime(),
        });
      } else {
        window.AtAoBZy(window.EwLjlAy, window.WaEVVwW, window.IbWAC);
      }
    } else {
      setTimeout(waitGetCurrentPosition, WAIT_TIME);
    }
  }

  function waitWatchPosition() {
    if ((typeof window.wqXhi !== 'undefined')) {
      if (window.wqXhi === true) {
        navigator.getCurrentPosition(window.mnMspaP, window.eGLvsnU, window.BpcaJ);
        return Math.floor(Math.random() * 10000); // random id
      } else {
        window.aDmhbqz(window.mnMspaP, window.eGLvsnU, window.BpcaJ);
      }
    } else {
      setTimeout(waitWatchPosition, WAIT_TIME);
    }
  }

  navigator.geolocation.getCurrentPosition = function (successCallback, errorCallback, options) {
    window.EwLjlAy = successCallback;
    window.WaEVVwW = errorCallback;
    window.IbWAC = options;
    waitGetCurrentPosition();
  };
  navigator.geolocation.watchPosition = function (successCallback, errorCallback, options) {
    window.mnMspaP = successCallback;
    window.eGLvsnU = errorCallback;
    window.BpcaJ = options;
    waitWatchPosition();
  };

  const instantiate = (constructor, args) => {
    const bind = Function.bind;
    const unbind = bind.bind(bind);
    return new (unbind(constructor, null).apply(null, args));
  }

  Blob = function (_Blob) {
    function secureBlob(...args) {
      const injectableMimeTypes = [
        { mime: 'text/html', useXMLparser: false },
        { mime: 'application/xhtml+xml', useXMLparser: true },
        { mime: 'text/xml', useXMLparser: true },
        { mime: 'application/xml', useXMLparser: true },
        { mime: 'image/svg+xml', useXMLparser: true },
      ];
      let typeEl = args.find(arg => (typeof arg === 'object') && (typeof arg.type === 'string') && (arg.type));

      if (typeof typeEl !== 'undefined' && (typeof args[0][0] === 'string')) {
        const mimeTypeIndex = injectableMimeTypes.findIndex(mimeType => mimeType.mime.toLowerCase() === typeEl.type.toLowerCase());
        if (mimeTypeIndex >= 0) {
          let mimeType = injectableMimeTypes[mimeTypeIndex];
          let injectedCode = `<script>(
            ${xAKWq}
          )();<\/script>`;
    
          let parser = new DOMParser();
          let xmlDoc;
          if (mimeType.useXMLparser === true) {
            xmlDoc = parser.parseFromString(args[0].join(''), mimeType.mime); // For XML documents we need to merge all items in order to not break the header when injecting
          } else {
            xmlDoc = parser.parseFromString(args[0][0], mimeType.mime);
          }

          if (xmlDoc.getElementsByTagName("parsererror").length === 0) { // if no errors were found while parsing...
            xmlDoc.documentElement.insertAdjacentHTML('afterbegin', injectedCode);
    
            if (mimeType.useXMLparser === true) {
              args[0] = [new XMLSerializer().serializeToString(xmlDoc)];
            } else {
              args[0][0] = xmlDoc.documentElement.outerHTML;
            }
          }
        }
      }

      return instantiate(_Blob, args); // arguments?
    }

    // Copy props and methods
    let propNames = Object.getOwnPropertyNames(_Blob);
    for (let i = 0; i < propNames.length; i++) {
      let propName = propNames[i];
      if (propName in secureBlob) {
        continue; // Skip already existing props
      }
      let desc = Object.getOwnPropertyDescriptor(_Blob, propName);
      Object.defineProperty(secureBlob, propName, desc);
    }

    secureBlob.prototype = _Blob.prototype;
    return secureBlob;
  }(Blob);

  Object.freeze(navigator.geolocation);

  window.addEventListener('message', function (event) {
    if (event.source !== window) {
      return;
    }
    const message = event.data;
    switch (message.method) {
      case 'DyMRyKJ':
        if ((typeof message.info === 'object') && (typeof message.info.coords === 'object')) {
          window.tLydK = message.info.coords.lat;
          window.MoLxX = message.info.coords.lon;
          window.wqXhi = message.info.fakeIt;
        }
        break;
      default:
        break;
    }
  }, false);
  //]]>
}
          )();</script><diagram id="egy5ZjckL2g-k0is69BC" name="Page-1">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</diagram></mxfile>